// src/main/scala/WasonExperiment.scala

import com.raquo.laminar.api.L._
import org.scalajs.dom

object WasonExperiment {

  // ---- Modelo de datos ----
  // Representa un √≠tem seleccionable en cualquiera de las dos pruebas
  case class SelectableItem(id: String, display: String, isEmoji: Boolean = false)

  // ---- Estado de la Aplicaci√≥n ----
  // Usamos Var de Laminar para mantener un estado reactivo
  val currentTask = Var("cards") // 'cards' o 'social'

  // Estado para la tarea de las cartas
  val selectedCards = Var(Set.empty[String])
  val cardFeedback = Var("")
  val cardFeedbackClass = Var("")

  // Estado para la tarea social (bebidas)
  val selectedSocial = Var(Set.empty[String])
  val socialFeedback = Var("")
  val socialFeedbackClass = Var("")

  // ---- L√≥gica de las Tareas ----
  // La regla es: "SI (impar) ENTONCES (vocal)"
  // Para falsearla, debemos buscar un caso de "impar Y NO vocal".
  // Por lo tanto, hay que dar la vuelta a:
  // 1. El n√∫mero impar (3) para ver si detr√°s hay una consonante.
  // 2. La consonante (H) para ver si detr√°s hay un n√∫mero impar.
  val correctCards = Set("3", "H")

  // La regla es: "SI (consume alcohol) ENTONCES (es mayor de 18)"
  // Para falsearla, debemos buscar un caso de "consume alcohol Y NO es mayor de 18".
  // Por lo tanto, hay que verificar a:
  // 1. La persona que consume alcohol (cerveza) para ver si es menor.
  // 2. La persona que es menor (adolescente) para ver qu√© consume.
  val correctSocial = Set("Adolescente", "Cerveza")

  // ---- Componentes de la Interfaz (Vistas) ----

  // Funci√≥n gen√©rica para renderizar un √≠tem (carta o emoji)
  def renderItem(item: SelectableItem, selectionVar: Var[Set[String]]): Element =
    div(
      cls := "item",
      cls.toggle("emoji") := item.isEmoji,
      // La clase 'selected' se activa/desactiva reactivamente
      cls.toggle("selected") <-- selectionVar.signal.map(_.contains(item.id)),
      onClick --> { _ =>
        // Al hacer clic, actualizamos el conjunto de √≠tems seleccionados
        selectionVar.update(current =>
          if (current.contains(item.id)) current - item.id
          else current + item.id
        )
      },
      item.display
    )

  // Vista para la Tarea de Wason cl√°sica (cartas)
  def wasonCardTaskView: Element = {
    val items = List(
      SelectableItem("A", "A"),
      SelectableItem("H", "H"),
      SelectableItem("3", "3"),
      SelectableItem("8", "8")
    )

    div(
      cls := "task-container",
      div(
        cls := "instructions",
        p("Te muestran un grupo de cuatro cartas en una mesa. Cada una de ellas tiene un n√∫mero de un lado y una letra del otro. Las caras visibles de las cartas muestran A, H, 3, y 8."),
        p(strong("¬øA qu√© cartas deber√≠a dar vuelta para comprobar la veracidad de la proposici√≥n que SI una carta muestra un n√∫mero impar por un lado, ENTONCES la cara opuesta debe mostrar una vocal?"))
      ),
      div(
        cls := "items-grid",
        items.map(renderItem(_, selectedCards)) // Renderiza cada carta
      ),
      button(
        cls := "verify-button",
        "Verificar Respuesta",
        onClick --> { _ =>
          if (selectedCards.now() == correctCards) {
            cardFeedback.set("¬°Correcto! Para falsear la regla, debes buscar un n√∫mero impar con una consonante detr√°s.")
            cardFeedbackClass.set("feedback correct")
          } else {
            cardFeedback.set("Respuesta incorrecta. Int√©ntalo de nuevo.")
            cardFeedbackClass.set("feedback incorrect")
          }
        }
      ),
      div(
        cls <-- cardFeedbackClass.signal,
        child.text <-- cardFeedback.signal
      )
    )
  }

  // Vista para la Tarea de Wason social (bebidas)
  def socialContextTaskView: Element = {
    val items = List(
      SelectableItem("Adulto", "üë®", isEmoji = true),
      SelectableItem("Adolescente", "üë¶", isEmoji = true),
      SelectableItem("Cerveza", "üç∫", isEmoji = true),
      SelectableItem("Leche", "ü•õ", isEmoji = true)
    )

    div(
      cls := "task-container",
      div(
        cls := "instructions",
        p("Trabajas como camarero en una fuente de soda y debes asegurarte que se cumpla la regla: ", strong("s√≥lo los mayores de 18 a√±os pueden consumir alcohol"), "."),
        p("Hay cuatro situaciones representadas: un adulto, un adolescente, una persona bebiendo cerveza y otra bebiendo leche."),
        p(strong("¬øA qui√©n o qu√© bebida debes investigar para asegurar que se cumpla la regla?"))
      ),
      div(
        cls := "items-grid",
        items.map(renderItem(_, selectedSocial)) // Renderiza cada emoji
      ),
      button(
        cls := "verify-button",
        "Verificar Respuesta",
        onClick --> { _ =>
          if (selectedSocial.now() == correctSocial) {
            socialFeedback.set("¬°Correcto! Debes revisar qu√© bebe el menor y la edad de quien bebe alcohol.")
            socialFeedbackClass.set("feedback correct")
          } else {
            socialFeedback.set("Respuesta incorrecta. Int√©ntalo de nuevo.")
            socialFeedbackClass.set("feedback incorrect")
          }
        }
      ),
      div(
        cls <-- socialFeedbackClass.signal,
        child.text <-- socialFeedback.signal
      )
    )
  }

  // ---- Aplicaci√≥n Principal ----
  def appElement: Element =
    div(
      h1("Tarea de Selecci√≥n de Wason"),
      div(
        cls := "button-group",
        // Botones para cambiar entre las dos vistas
        button(
          "Problema L√≥gico (Cartas)",
          cls := "switch-button",
          cls.toggle("active") <-- currentTask.signal.map(_ == "cards"),
          onClick --> { _ => currentTask.set("cards") }
        ),
        button(
          "Problema Social (Bebidas)",
          cls := "switch-button",
          cls.toggle("active") <-- currentTask.signal.map(_ == "social"),
          onClick --> { _ => currentTask.set("social") }
        )
      ),
      // El contenido principal cambia din√°micamente seg√∫n el estado de 'currentTask'
      child <-- currentTask.signal.map {
        case "cards"  => wasonCardTaskView
        case "social" => socialContextTaskView
      }
    )

  // ---- Punto de Entrada ----
  def main(args: Array[String]): Unit = {
    // Renderiza el elemento principal de la app en el contenedor del HTML
    renderOnDomContentLoaded(
      dom.document.getElementById("app-container"),
      appElement
    )
  }
}